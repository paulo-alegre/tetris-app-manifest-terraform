pipeline {
    agent any

    tools {
        jdk 'java17'
        nodejs 'node16'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        GIT_USER_NAME='paulo-alegre'
        GIT_REPO_NAME='tetris-app-manifest-terraform'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/paulo-alegre/tetris-v2-app.git'
            }
        }
    
        
         stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=TetrisV2 \
                    -Dsonar.projectKey=TetrisV2 '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        
        stage('NPM Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Trivy File Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Docker Build and Push') {
            steps {
               withDockerRegistry(credentialsId: 'docker-cred', url: '') {
                   sh '''
                   docker build -t tetrisv2 .
                   docker tag tetrisv2 ipau/tetrisv2:$BUILD_NUMBER
                   docker push ipau/tetrisv2:$BUILD_NUMBER
                   '''
               }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image ipau/tetrisv2:$BUILD_NUMBER > trivyImage.txt'
            }
        }
        
        stage('Checkout Deployment Manifest') {
            steps {
                git 'https://github.com/paulo-alegre/tetris-app-manifest-terraform.git'
            }
        }    
        
    stage('Update Deployment File') {
      steps {
        script {
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            // Determine the image name dynamically based on your versioning strategy
            NEW_IMAGE_NAME = "ipau/tetrisv2:$BUILD_NUMBER"

            // Replace the image name in the deployment.yaml file
            sh "sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' deployment.yml"

            // Git commands to stage, commit, and push the changes
            sh 'git add deployment.yml'
            sh "git commit -m 'Update deployment image to $NEW_IMAGE_NAME'"
            sh "git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master"
          }
        }
      }
     }
    }
}
